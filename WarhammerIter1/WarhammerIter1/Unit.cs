///////////////////////////////////////////////////////////
//  Unit.cs
//  Implementation of the Class Unit
//  Generated by Enterprise Architect
//  Created on:      04-ноя-2014 12:01:12
//  Original author: Samurai
///////////////////////////////////////////////////////////

using System.Collections.Generic;


public class Unit 
{
	private int Alive = 0;
	private Effect[] Effects;
	private BasicModel[] Models;
	public BasicModel m_BasicModel;
	public Effect m_Effect;
    public Player w_Player;

	public Unit()
    {
        Models = new BasicModel[1];
        Models[0] = (BasicModel)new Infantry();
        m_BasicModel = Models[0];
        foreach(BasicModel w in Models)
        {
            w.w_Unit=this;
        }
	}

    
    public List<Wound> Shoot(Unit Target,int type)
    {
        List<Wound> L=new List<Wound>{};
        foreach(BasicModel ShootModel in Models)
        {
            L.AddRange(ShootModel.Shoot(type));
        }
        return L;
    }
    public void Wonding(Unit Sourse,List<Wound> Wounds)
    {
        DiceGenerator d = new DiceGenerator();
        int n = Wounds.Count;
        int t=0,Majority=0;
        List<int> dices = d.manyD6(n);
        foreach(BasicModel m in Models)
        {
            t++;
            Majority += m.GetToughnes(Sourse);
        }
        Majority = Majority / t;
        for (int i = 0; i < n;i++)
        {
            if((Wounds[i].GetStrenght() - Majority + 4)>dices[i])
            {
                Wounds[i].fail();
            }
            if((Wounds[i].GetStrenght()- Majority +4 ) == 7 && dices[i]==6)
            {
                Wounds[i].win();
            }
        }
        if (Wounds.Count != 0)
            Wounds[0].deleteFail(Wounds);
    }

	~Unit()
    {

	}

	public virtual void Dispose(){

	}

}//end Unit
///////////////////////////////////////////////////////////
//  BasicModel.cs
//  Implementation of the Class BasicModel
//  Generated by Enterprise Architect
//  Created on:      04-ноя-2014 12:01:08
//  Original author: Samurai
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Windows.Forms;
using System;
using System.Drawing;

public abstract class BasicModel {

	protected int Alive = 0;
	protected int BalisticSkill;
	protected int Initiative;
	protected int InvulnerableSave = 7;
	protected int Move = 6;
	protected int Stilness = 0;
	protected int Strength;
    protected int Moved=0;
	protected Weapon[] Weapons;
    protected Weapon m_Weapons;
    public Unit w_Unit;
	protected int WeaponSkill;
	protected int Wound;
    public int x, y;

    public void BeginPfase(Pfase NowPfase, Player NowPlayer)
    {
        switch (NowPfase)
        {
            case Pfase.Move:
                break;
            case Pfase.Shoot:
                break;
            case Pfase.Charge:
                break;
        }
    }

    public void EndPfase(Pfase NowPfase,Player NowPlayer)
    {
        switch (NowPfase)
        {
            case Pfase.Move:
                break;
            case Pfase.Shoot:
                break;
            case Pfase.Charge:
                break;
        }
    }

    virtual public int Save(Wound x, int dice,int Cover)
    {
        return 0;
    }

    public int IsAlive()
    {
        return Alive;
    }


    public virtual int  GetToughnes(Unit Surce)
    {
        return 4;
    }

	public BasicModel()
    {
        Wound = 1;
	}

    public virtual List<Wound> Shoot(int t,DiceGenerator DiceGen)
    {
        if (Alive == 0)
        {
            List<Wound> L = new List<Wound> { };
            L.AddRange(Weapons[0].Shoot(Moved,BalisticSkill));
            return L;
        }
        else
            return null;
    }

	~BasicModel()
    {

	}

    public abstract void Paint(PaintEventArgs e,Player now);

}//end BasicModel
///////////////////////////////////////////////////////////
//  BasicModel.cs
//  Implementation of the Class BasicModel
//  Generated by Enterprise Architect
//  Created on:      04-ноя-2014 12:01:08
//  Original author: Samurai
///////////////////////////////////////////////////////////

using System.Collections.Generic;
using System.Windows.Forms;
using System;
using System.Drawing;

public abstract class BasicModel {

	protected int Alive = 0;
	protected int BalisticSkill;
	protected int Initiative;
	protected int InvulnerableSave = 7;
	protected int Move = 6;
	protected int Stilness = 0;
	protected int Strength;
    protected int Moved=0;
	protected Weapon[] Weapons;
    protected Weapon m_Weapons;
    public Unit w_Unit;
	protected int WeaponSkill;
	protected int Wound;
    public int x, y;

    virtual public int Save(Wound x, int dice,int Cover)
    {
        return 0;
    }

    public int IsAlive()
    {
        return Alive;
    }


    public virtual int  GetToughnes(Unit Surce)
    {
        return 4;
    }

	public BasicModel()
    {
        Wound = 1;
	}

    public virtual List<Wound> Shoot(int t,DiceGenerator DiceGen)
    {
        List<Wound> L = new List<Wound> {};
        List<int> dice;
        L.AddRange(Weapons[0].Shoot(Moved));
        int n = L.Count;
        dice = DiceGen.manyD6(n);
        char a=' ';
        string dices = new string(a, 1);
        foreach(int d in dice )
        {
            char c = (char)('0' + d);
            dices  += c;
            dices += " ";
        }
        //TextBox Box = new TextBox();
        MessageBox.Show(dices);
        for (int i = 0; i < n;i++ )
        {
            if(dice[i]<7-BalisticSkill)
            {
                //L.Remove(L[r.Next() % L.Count]);
                L[i].fail();
            }
        }
        if(L.Count!=0)
            L[0].deleteFail(L);
        return L;
    }

	~BasicModel()
    {

	}

    public abstract void Paint(PaintEventArgs e,Player now);

}//end BasicModel